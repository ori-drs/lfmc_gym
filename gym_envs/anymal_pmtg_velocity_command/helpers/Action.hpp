//
// Created by siddhant on 01/11/22.
//

#ifndef _LFMC_GYM_ACTION_HPP
#define _LFMC_GYM_ACTION_HPP

#include "Motion.hpp"
#include "Kinematics.hpp"


class ActionHandler {
private:
    const int actionDim_ = 16;
    Eigen::VectorXd effectiveAction_;
    Eigen::VectorXd actionScaling_, actionOffset_;

    Eigen::Matrix<double, 12, 1> desiredFeetPositions_, desiredJointPositions_;

private:
    MotionGenerator feetMotion_;
    InverseKinematics inverseKinematics_;

public:
    ActionHandler(const double &baseFrequency, const double &feetClearance,
                  const double &controlStepTime, const Eigen::VectorXd &nominalFeetPosition)
            : feetMotion_(baseFrequency, feetClearance, controlStepTime, nominalFeetPosition) {
        effectiveAction_.setZero(actionDim_);

        actionScaling_.setZero(actionDim_);
        actionOffset_.setZero(actionDim_);

        actionScaling_.head(4).setConstant(0.25);

        for (auto f = 0; f < 4; ++f) {
            actionScaling_.tail(12).segment(f * 3, 3) << 0.2, 0.2, 0.035;
        }
    }

    ActionHandler(const double &baseFrequency, const double &feetClearance,
                  const double &controlStepTime, const Eigen::VectorXd &nominalFeetPosition,
                  const Eigen::VectorXd &actionScaling, const Eigen::VectorXd &actionOffset)
            : ActionHandler(baseFrequency, feetClearance, controlStepTime, nominalFeetPosition) {
        actionScaling_ = actionScaling;
        actionOffset_ = actionOffset;
    }

    const Eigen::Matrix<double, 12, 1> &update(
            const Eigen::VectorXd &action, const Eigen::VectorXd &gravityAxis, bool zeroCommand = false) {
        // Scale the actions
        effectiveAction_ = action.cwiseMin(10.).cwiseMax(-10.).cwiseProduct(actionScaling_) + actionOffset_;

        // Get the new feet position targets given the delta oscillatory frequency and robot orientation
        desiredFeetPositions_ = feetMotion_.advance(effectiveAction_.head(4), gravityAxis, zeroCommand);

        // Introduce residuals (generated by the policy) to the feet positions
        desiredFeetPositions_ += effectiveAction_.tail(12);

        // Map feet positions to joint positions
        desiredJointPositions_ = inverseKinematics_.mapFeetPositionsToJointPositions(desiredFeetPositions_);

        return desiredJointPositions_;
    }

    void reset() {
        feetMotion_.reset();
    }

    const Eigen::Matrix<double, 4, 1> &getFeetPhase() {
        return feetMotion_.getFeetPhase();
    }

    [[nodiscard]] int getActionDim() const {
        return actionDim_;
    }
};

#endif //_LFMC_GYM_ACTION_HPP
